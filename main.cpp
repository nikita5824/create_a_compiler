#line 2 "main.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif

#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif /* __STDC__ */
#endif /* ! __cplusplus */

#ifdef __TURBOC__
#pragma warn - rch
#pragma warn - use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int)(unsigned char)c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin)

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n)                                      \
	do                                                 \
	{                                                  \
		/* Undo effects of setting up yytext. */       \
		*yy_cp = yy_hold_char;                         \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ;  \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
	} while (0)

#define unput(c) yyunput(c, yytext_ptr)

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;

struct yy_buffer_state
{
	FILE *yy_input_file;

	char *yy_ch_buf;  /* input buffer */
	char *yy_buf_pos; /* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars; /* number of characters read into yy_ch_buf */

int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *)0;
static int yy_init = 1;	 /* whether we need to initialize */
static int yy_start = 0; /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO((FILE * input_file));

void yy_switch_to_buffer YY_PROTO((YY_BUFFER_STATE new_buffer));
void yy_load_buffer_state YY_PROTO((void));
YY_BUFFER_STATE yy_create_buffer YY_PROTO((FILE * file, int size));
void yy_delete_buffer YY_PROTO((YY_BUFFER_STATE b));
void yy_init_buffer YY_PROTO((YY_BUFFER_STATE b, FILE *file));
void yy_flush_buffer YY_PROTO((YY_BUFFER_STATE b));
#define YY_FLUSH_BUFFER yy_flush_buffer(yy_current_buffer)

YY_BUFFER_STATE yy_scan_buffer YY_PROTO((char *base, yy_size_t size));
YY_BUFFER_STATE yy_scan_string YY_PROTO((yyconst char *str));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO((yyconst char *bytes, int len));

static void *yy_flex_alloc YY_PROTO((yy_size_t));
static void *yy_flex_realloc YY_PROTO((void *, yy_size_t));
static void yy_flex_free YY_PROTO((void *));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive)                           \
	{                                                                \
		if (!yy_current_buffer)                                      \
			yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE); \
		yy_current_buffer->yy_is_interactive = is_interactive;       \
	}

#define yy_set_bol(at_bol)                                           \
	{                                                                \
		if (!yy_current_buffer)                                      \
			yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE); \
		yy_current_buffer->yy_at_bol = at_bol;                       \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *)0, *yyout = (FILE *)0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO((void));
static yy_state_type yy_try_NUL_trans YY_PROTO((yy_state_type current_state));
static int yy_get_next_buffer YY_PROTO((void));
static void yy_fatal_error YY_PROTO((yyconst char msg[]));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION        \
	yytext_ptr = yy_bp;            \
	yyleng = (int)(yy_cp - yy_bp); \
	yy_hold_char = *yy_cp;         \
	*yy_cp = '\0';                 \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 17
#define YY_END_OF_BUFFER 18
static yyconst short int yy_accept[307] =
	{0,
	 0, 0, 18, 17, 17, 17, 17, 6, 17, 11,
	 6, 6, 6, 17, 6, 1, 1, 8, 10, 8,
	 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	 14, 14, 8, 7, 7, 0, 0, 0, 10, 7,
	 11, 6, 0, 1, 1, 0, 0, 0, 0, 0,
	 5, 5, 0, 0, 0, 1, 0, 8, 10, 14,
	 14, 14, 14, 14, 14, 13, 14, 14, 14, 14,
	 14, 12, 14, 14, 14, 14, 14, 14, 14, 14,
	 9, 14, 13, 13, 14, 14, 14, 13, 14, 14,

	 14, 0, 0, 11, 0, 0, 0, 0, 1, 1,
	 8, 10, 8, 14, 14, 14, 14, 14, 14, 14,
	 14, 14, 14, 14, 0, 15, 15, 0, 0, 0,
	 0, 0, 5, 2, 0, 5, 3, 4, 14, 14,
	 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	 14, 12, 14, 14, 14, 9, 14, 14, 14, 14,
	 14, 14, 14, 14, 14, 14, 14, 1, 14, 14,
	 9, 14, 14, 14, 14, 16, 16, 16, 0, 0,
	 0, 0, 0, 2, 3, 4, 14, 14, 0, 14,
	 14, 14, 14, 14, 14, 14, 0, 14, 0, 14,

	 14, 0, 14, 14, 2, 5, 3, 4, 14, 14,
	 14, 14, 16, 16, 16, 16, 0, 14, 0, 0,
	 14, 14, 14, 14, 14, 0, 0, 14, 0, 0,
	 0, 14, 14, 0, 0, 14, 2, 5, 3, 4,
	 16, 16, 16, 16, 0, 2, 0, 0, 0, 14,
	 14, 0, 4, 0, 0, 0, 0, 1, 0, 0,
	 0, 0, 0, 14, 3, 0, 0, 0, 16, 16,
	 16, 16, 0, 0, 0, 14, 0, 0, 0, 0,
	 0, 0, 0, 0, 0, 0, 0, 14, 0, 0,
	 0, 16, 16, 0, 5, 0, 0, 0, 0, 0,

	 0, 0, 0, 0, 0, 0};

static yyconst int yy_ec[256] =
	{0,
	 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	 1, 2, 3, 4, 5, 1, 6, 1, 7, 8,
	 9, 10, 11, 1, 12, 13, 14, 15, 16, 17,
	 17, 17, 17, 17, 17, 18, 18, 19, 1, 20,
	 21, 22, 1, 1, 23, 23, 24, 23, 24, 25,
	 26, 26, 27, 26, 26, 27, 27, 28, 27, 26,
	 26, 26, 27, 29, 26, 26, 26, 26, 26, 26,
	 30, 1, 31, 1, 32, 1, 33, 34, 35, 36,

	 37, 38, 39, 40, 41, 26, 42, 43, 44, 45,
	 46, 47, 26, 48, 49, 50, 51, 26, 52, 53,
	 54, 26, 55, 1, 56, 1, 1, 1, 1, 1,
	 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,

	 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	 1, 1, 1, 1, 1};

static yyconst int yy_meta[57] =
	{0,
	 1, 2, 1, 3, 4, 1, 3, 1, 1, 1,
	 1, 2, 1, 1, 5, 5, 5, 5, 1, 1,
	 1, 1, 5, 5, 5, 5, 5, 5, 5, 1,
	 1, 6, 5, 5, 5, 5, 5, 5, 5, 5,
	 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	 5, 5, 5, 5, 1, 1};

static yyconst short int yy_base[311] =
	{0,
	 0, 0, 964, 965, 942, 53, 957, 940, 54, 911,
	 49, 938, 58, 47, 63, 92, 65, 45, 46, 48,
	 909, 39, 40, 42, 66, 52, 70, 75, 74, 87,
	 82, 69, 99, 54, 93, 105, 101, 114, 161, 107,
	 117, 111, 908, 952, 965, 142, 217, 950, 905, 946,
	 903, 965, 257, 0, 263, 910, 907, 912, 903, 912,
	 267, 271, 146, 278, 282, 895, 286, 887, 884, 879,
	 878, 116, 268, 71, 256, 877, 269, 270, 273, 276,
	 285, 876, 283, 242, 281, 287, 289, 293, 294, 278,
	 868, 297, 298, 867, 301, 304, 302, 865, 864, 314,

	 307, 883, 882, 852, 851, 850, 0, 848, 351, 324,
	 338, 340, 341, 324, 286, 329, 334, 337, 325, 0,
	 327, 343, 330, 354, 389, 965, 0, 816, 814, 805,
	 807, 799, 797, 379, 390, 394, 398, 401, 789, 383,
	 384, 385, 390, 396, 786, 352, 389, 386, 393, 403,
	 404, 760, 397, 406, 423, 758, 402, 436, 415, 411,
	 448, 751, 744, 408, 446, 451, 458, 719, 463, 435,
	 718, 421, 434, 442, 447, 485, 494, 495, 752, 726,
	 740, 739, 730, 656, 633, 626, 456, 455, 493, 266,
	 624, 465, 466, 473, 468, 486, 508, 472, 514, 492,

	 487, 522, 497, 494, 529, 532, 536, 583, 516, 518,
	 519, 521, 554, 555, 556, 562, 573, 522, 571, 575,
	 528, 525, 533, 571, 551, 592, 597, 546, 612, 637,
	 624, 550, 562, 642, 647, 553, 515, 445, 416, 409,
	 612, 614, 618, 627, 391, 292, 588, 632, 662, 617,
	 618, 676, 119, 620, 681, 684, 695, 83, 705, 628,
	 712, 700, 716, 670, 36, 654, 720, 727, 677, 742,
	 749, 750, 746, 749, 754, 669, 758, 771, 781, 776,
	 786, 797, 795, 810, 814, 824, 827, 804, 839, 847,
	 850, 812, 830, 861, 19, 871, 710, 878, 766, 882,

	 876, 866, 893, 903, 906, 965, 929, 933, 935, 940};

static yyconst short int yy_def[311] =
	{0,
	 306, 1, 306, 306, 306, 307, 308, 306, 307, 306,
	 306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	 309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	 309, 309, 309, 309, 309, 309, 309, 309, 306, 309,
	 309, 309, 306, 306, 306, 307, 306, 308, 306, 306,
	 306, 306, 306, 16, 306, 306, 306, 306, 306, 306,
	 306, 306, 306, 306, 306, 306, 306, 306, 306, 309,
	 309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	 309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	 309, 309, 309, 309, 309, 309, 309, 309, 309, 309,

	 309, 306, 306, 306, 306, 306, 13, 306, 309, 109,
	 306, 306, 306, 309, 309, 309, 309, 309, 309, 39,
	 309, 309, 309, 309, 310, 306, 47, 306, 306, 306,
	 306, 306, 306, 306, 306, 306, 306, 306, 309, 309,
	 309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	 309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	 309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	 309, 309, 309, 309, 309, 310, 310, 310, 306, 306,
	 306, 306, 306, 306, 306, 306, 309, 309, 306, 309,
	 309, 309, 309, 309, 309, 309, 306, 309, 306, 309,

	 309, 306, 309, 309, 309, 309, 309, 169, 309, 309,
	 309, 309, 310, 310, 310, 310, 306, 309, 306, 306,
	 309, 309, 309, 309, 309, 306, 306, 309, 306, 306,
	 306, 309, 309, 306, 306, 309, 309, 309, 309, 309,
	 310, 310, 310, 310, 306, 306, 306, 306, 306, 309,
	 309, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	 306, 306, 306, 309, 306, 306, 306, 306, 310, 310,
	 310, 310, 306, 306, 306, 309, 306, 306, 306, 306,
	 306, 306, 306, 306, 306, 306, 306, 309, 306, 306,
	 306, 310, 310, 306, 306, 306, 306, 306, 306, 306,

	 306, 306, 306, 306, 306, 0, 306, 306, 306, 306};

static yyconst short int yy_nxt[1022] =
	{0,
	 4, 4, 5, 6, 7, 8, 9, 10, 10, 11,
	 12, 13, 14, 15, 16, 17, 17, 17, 10, 18,
	 19, 20, 21, 21, 22, 21, 21, 23, 24, 10,
	 10, 21, 25, 26, 27, 28, 29, 30, 31, 32,
	 33, 21, 34, 21, 35, 36, 37, 38, 39, 40,
	 21, 41, 21, 42, 10, 10, 44, 45, 52, 45,
	 50, 61, 61, 61, 61, 43, 43, 133, 43, 49,
	 53, 72, 54, 55, 55, 55, 52, 62, 49, 55,
	 55, 55, 55, 49, 185, 73, 95, 71, 71, 74,
	 71, 56, 77, 68, 69, 57, 68, 58, 59, 78,

	 71, 64, 71, 60, 62, 90, 55, 55, 55, 55,
	 75, 81, 79, 66, 76, 80, 83, 71, 71, 71,
	 82, 141, 71, 71, 89, 63, 84, 85, 64, 86,
	 71, 66, 87, 99, 88, 71, 91, 65, 96, 97,
	 66, 71, 92, 93, 67, 45, 100, 94, 45, 71,
	 101, 124, 98, 71, 121, 71, 122, 123, 139, 71,
	 134, 134, 71, 102, 71, 71, 103, 186, 104, 104,
	 105, 106, 107, 53, 108, 109, 110, 110, 110, 104,
	 111, 112, 113, 70, 70, 70, 70, 70, 70, 70,
	 104, 104, 70, 70, 114, 70, 70, 115, 116, 70,

	 117, 118, 70, 70, 70, 70, 119, 70, 70, 120,
	 70, 70, 70, 70, 70, 104, 104, 126, 127, 126,
	 126, 126, 126, 126, 126, 126, 126, 126, 127, 126,
	 126, 127, 127, 127, 127, 126, 126, 126, 126, 127,
	 47, 127, 127, 47, 47, 47, 126, 126, 127, 127,
	 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
	 127, 61, 61, 61, 61, 62, 149, 55, 55, 55,
	 55, 61, 61, 61, 61, 61, 61, 61, 61, 135,
	 71, 98, 136, 136, 136, 136, 137, 137, 137, 64,

	 138, 138, 138, 138, 71, 145, 144, 98, 138, 138,
	 138, 66, 140, 143, 71, 133, 71, 71, 71, 133,
	 146, 71, 98, 147, 71, 150, 71, 98, 170, 71,
	 155, 148, 151, 71, 71, 71, 152, 71, 153, 154,
	 184, 71, 71, 157, 159, 71, 71, 158, 160, 71,
	 71, 161, 71, 98, 163, 71, 164, 70, 43, 97,
	 43, 43, 71, 62, 77, 110, 110, 110, 110, 70,
	 90, 86, 71, 71, 171, 71, 70, 71, 71, 174,
	 98, 172, 71, 173, 165, 71, 68, 166, 69, 68,
	 175, 71, 177, 134, 134, 178, 167, 189, 252, 168,

	 71, 192, 71, 169, 136, 136, 136, 136, 136, 136,
	 136, 136, 137, 137, 137, 138, 138, 138, 138, 98,
	 98, 188, 91, 138, 138, 138, 91, 184, 190, 193,
	 197, 71, 71, 71, 71, 194, 195, 71, 71, 196,
	 98, 71, 133, 199, 71, 71, 185, 198, 200, 186,
	 71, 71, 71, 201, 71, 202, 71, 240, 204, 71,
	 205, 205, 135, 71, 239, 206, 206, 206, 206, 71,
	 158, 71, 207, 207, 207, 209, 211, 208, 208, 208,
	 208, 98, 71, 210, 71, 208, 208, 208, 213, 212,
	 71, 214, 98, 238, 71, 71, 71, 215, 213, 71,

	 214, 216, 218, 71, 71, 221, 71, 219, 220, 220,
	 220, 71, 222, 71, 71, 223, 71, 224, 225, 228,
	 71, 71, 226, 227, 227, 227, 229, 232, 230, 231,
	 231, 231, 233, 98, 71, 71, 234, 235, 235, 235,
	 71, 236, 71, 205, 205, 71, 206, 206, 206, 206,
	 207, 207, 207, 171, 171, 152, 98, 241, 213, 243,
	 214, 242, 214, 237, 71, 213, 71, 71, 244, 71,
	 71, 98, 250, 71, 98, 251, 71, 237, 252, 246,
	 238, 71, 98, 246, 239, 220, 220, 220, 220, 220,
	 220, 220, 220, 98, 71, 98, 264, 98, 71, 71,

	 253, 71, 273, 273, 247, 253, 227, 227, 227, 227,
	 71, 227, 227, 227, 227, 241, 248, 213, 214, 71,
	 242, 269, 245, 249, 270, 254, 257, 257, 257, 257,
	 271, 240, 258, 272, 280, 280, 259, 255, 231, 231,
	 231, 231, 283, 283, 256, 258, 274, 274, 274, 259,
	 265, 231, 231, 231, 231, 265, 235, 235, 235, 235,
	 261, 235, 235, 235, 235, 71, 71, 276, 289, 289,
	 260, 98, 94, 261, 186, 266, 275, 275, 275, 275,
	 292, 185, 262, 214, 275, 275, 275, 267, 277, 263,
	 278, 279, 279, 279, 268, 281, 281, 281, 282, 282,

	 282, 282, 288, 258, 184, 98, 282, 282, 282, 257,
	 257, 257, 257, 258, 286, 286, 286, 71, 71, 257,
	 257, 257, 257, 284, 301, 301, 285, 285, 285, 285,
	 287, 287, 287, 287, 290, 290, 290, 202, 287, 287,
	 287, 291, 291, 291, 291, 213, 199, 197, 293, 291,
	 291, 291, 292, 213, 246, 214, 293, 246, 217, 189,
	 273, 273, 246, 274, 274, 274, 156, 168, 275, 275,
	 275, 275, 294, 294, 294, 294, 275, 275, 275, 295,
	 304, 304, 304, 296, 253, 279, 279, 279, 279, 295,
	 280, 280, 203, 296, 253, 279, 279, 279, 279, 94,

	 281, 281, 281, 258, 297, 253, 156, 298, 71, 283,
	 283, 282, 282, 282, 282, 243, 299, 298, 214, 282,
	 282, 282, 258, 300, 285, 285, 285, 285, 285, 285,
	 285, 285, 258, 213, 191, 258, 244, 187, 286, 286,
	 286, 287, 287, 287, 287, 133, 98, 265, 183, 287,
	 287, 287, 71, 289, 289, 265, 182, 181, 265, 180,
	 179, 290, 290, 290, 291, 291, 291, 291, 49, 295,
	 49, 49, 291, 291, 291, 294, 294, 294, 294, 295,
	 303, 303, 303, 303, 295, 294, 294, 294, 294, 302,
	 301, 301, 303, 303, 303, 303, 305, 305, 305, 305,

	 51, 295, 49, 43, 305, 305, 305, 303, 303, 303,
	 303, 295, 162, 71, 295, 71, 156, 304, 304, 304,
	 305, 305, 305, 305, 71, 142, 71, 71, 305, 305,
	 305, 46, 69, 46, 47, 68, 47, 47, 47, 70,
	 70, 176, 176, 66, 176, 176, 132, 131, 130, 129,
	 128, 51, 125, 69, 48, 125, 68, 71, 49, 51,
	 49, 48, 43, 306, 3, 306, 306, 306, 306, 306,
	 306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	 306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	 306, 306, 306, 306, 306, 306, 306, 306, 306, 306,

	 306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	 306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	 306};

static yyconst short int yy_chk[1022] =
	{0,
	 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	 1, 1, 1, 1, 1, 1, 6, 9, 11, 6,
	 9, 14, 14, 14, 14, 18, 19, 295, 20, 11,
	 13, 22, 13, 13, 13, 13, 15, 17, 13, 17,
	 17, 17, 17, 15, 265, 23, 34, 22, 23, 24,
	 24, 13, 26, 18, 19, 13, 20, 13, 13, 26,

	 26, 17, 34, 13, 16, 32, 16, 16, 16, 16,
	 25, 28, 27, 17, 25, 27, 29, 32, 27, 74,
	 28, 74, 29, 28, 31, 16, 29, 30, 16, 30,
	 31, 258, 30, 37, 30, 30, 33, 16, 35, 36,
	 16, 35, 33, 33, 16, 46, 38, 33, 46, 37,
	 38, 42, 36, 36, 40, 40, 41, 41, 72, 42,
	 63, 63, 38, 39, 72, 41, 39, 253, 39, 39,
	 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
	 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
	 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,

	 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
	 39, 39, 39, 39, 39, 39, 39, 47, 47, 47,
	 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	 47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	 47, 53, 53, 53, 53, 55, 84, 55, 55, 55,
	 55, 61, 61, 61, 61, 62, 62, 62, 62, 64,
	 84, 75, 64, 64, 64, 64, 65, 65, 65, 55,

	 67, 67, 67, 67, 75, 79, 78, 190, 67, 67,
	 67, 55, 73, 77, 190, 61, 73, 77, 78, 62,
	 80, 79, 81, 83, 80, 85, 90, 81, 115, 85,
	 90, 83, 86, 81, 115, 86, 87, 87, 88, 89,
	 246, 88, 89, 92, 95, 92, 93, 93, 96, 95,
	 97, 97, 96, 96, 100, 101, 101, 110, 111, 119,
	 112, 113, 100, 109, 114, 109, 109, 109, 109, 110,
	 117, 116, 114, 119, 118, 121, 110, 116, 123, 123,
	 121, 118, 117, 122, 109, 118, 111, 109, 112, 113,
	 124, 122, 125, 134, 134, 125, 109, 143, 245, 109,

	 146, 146, 124, 109, 135, 135, 135, 135, 136, 136,
	 136, 136, 137, 137, 137, 138, 138, 138, 138, 140,
	 141, 142, 148, 138, 138, 138, 147, 134, 144, 149,
	 155, 140, 141, 142, 148, 150, 151, 147, 143, 154,
	 153, 149, 136, 158, 144, 153, 137, 157, 159, 138,
	 157, 150, 151, 160, 154, 161, 164, 240, 164, 160,
	 165, 165, 166, 159, 239, 166, 166, 166, 166, 172,
	 172, 155, 167, 167, 167, 170, 173, 169, 169, 169,
	 169, 174, 173, 170, 158, 169, 169, 169, 176, 175,
	 174, 176, 187, 238, 165, 175, 161, 177, 178, 166,

	 177, 178, 188, 188, 187, 192, 167, 189, 189, 189,
	 189, 169, 193, 192, 193, 194, 195, 195, 196, 198,
	 198, 194, 197, 197, 197, 197, 199, 200, 199, 199,
	 199, 199, 201, 203, 196, 201, 202, 202, 202, 202,
	 200, 204, 204, 205, 205, 203, 206, 206, 206, 206,
	 207, 207, 207, 209, 210, 211, 212, 213, 214, 215,
	 213, 214, 215, 237, 209, 216, 210, 211, 216, 212,
	 218, 218, 221, 222, 222, 223, 221, 205, 224, 219,
	 206, 223, 232, 220, 207, 219, 219, 219, 219, 220,
	 220, 220, 220, 225, 228, 228, 233, 236, 232, 225,

	 226, 236, 247, 247, 219, 227, 226, 226, 226, 226,
	 233, 227, 227, 227, 227, 241, 219, 242, 241, 224,
	 242, 243, 217, 219, 243, 226, 229, 229, 229, 229,
	 244, 208, 231, 244, 254, 254, 231, 226, 231, 231,
	 231, 231, 260, 260, 226, 230, 248, 248, 248, 230,
	 234, 230, 230, 230, 230, 235, 234, 234, 234, 234,
	 231, 235, 235, 235, 235, 250, 251, 250, 266, 266,
	 230, 251, 191, 230, 186, 234, 249, 249, 249, 249,
	 269, 185, 230, 269, 249, 249, 249, 234, 252, 230,
	 252, 252, 252, 252, 234, 255, 255, 255, 256, 256,

	 256, 256, 264, 257, 184, 276, 256, 256, 256, 257,
	 257, 257, 257, 259, 262, 262, 262, 276, 264, 259,
	 259, 259, 259, 261, 297, 297, 261, 261, 261, 261,
	 263, 263, 263, 263, 267, 267, 267, 183, 263, 263,
	 263, 268, 268, 268, 268, 270, 182, 181, 270, 268,
	 268, 268, 271, 272, 273, 271, 272, 274, 180, 179,
	 273, 273, 275, 274, 274, 274, 171, 168, 275, 275,
	 275, 275, 277, 277, 277, 277, 275, 275, 275, 278,
	 299, 299, 299, 278, 280, 278, 278, 278, 278, 279,
	 280, 280, 163, 279, 281, 279, 279, 279, 279, 162,

	 281, 281, 281, 283, 278, 282, 156, 278, 152, 283,
	 283, 282, 282, 282, 282, 292, 278, 279, 292, 282,
	 282, 282, 285, 278, 284, 284, 284, 284, 285, 285,
	 285, 285, 286, 293, 145, 287, 293, 139, 286, 286,
	 286, 287, 287, 287, 287, 133, 288, 289, 132, 287,
	 287, 287, 288, 289, 289, 290, 131, 130, 291, 129,
	 128, 290, 290, 290, 291, 291, 291, 291, 108, 294,
	 106, 105, 291, 291, 291, 294, 294, 294, 294, 296,
	 302, 302, 302, 302, 301, 296, 296, 296, 296, 298,
	 301, 301, 298, 298, 298, 298, 300, 300, 300, 300,

	 104, 303, 103, 102, 300, 300, 300, 303, 303, 303,
	 303, 304, 99, 98, 305, 94, 91, 304, 304, 304,
	 305, 305, 305, 305, 82, 76, 71, 70, 305, 305,
	 305, 307, 69, 307, 308, 68, 308, 308, 308, 309,
	 309, 310, 310, 66, 310, 310, 60, 59, 58, 57,
	 56, 51, 50, 49, 48, 44, 43, 21, 12, 10,
	 8, 7, 5, 3, 306, 306, 306, 306, 306, 306,
	 306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	 306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	 306, 306, 306, 306, 306, 306, 306, 306, 306, 306,

	 306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	 306, 306, 306, 306, 306, 306, 306, 306, 306, 306,
	 306};

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "lexer.l"
#define INITIAL 0
#line 3 "lexer.l"
#include <string.h>
#include <iostream>
#include "unistd.h"

class TLex
{
public:
	std::string _name;
	int _num;
};
#define YY_DECL TLex *nextLex()
#line 707 "main.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO((void));
#else
extern int yywrap YY_PROTO((void));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO((int c, char *buf_ptr));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO((char *, yyconst char *, int));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO((void));
#else
static int input YY_PROTO((void));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO((int new_state));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO((void));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO((void));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void)fwrite(yytext, yyleng, 1, yyout)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)                                       \
	if (yy_current_buffer->yy_is_interactive)                                 \
	{                                                                         \
		int c = '*', n;                                                       \
		for (n = 0; n < max_size &&                                           \
					(c = getc(yyin)) != EOF && c != '\n';                     \
			 ++n)                                                             \
			buf[n] = (char)c;                                                 \
		if (c == '\n')                                                        \
			buf[n++] = (char)c;                                               \
		if (c == EOF && ferror(yyin))                                         \
			YY_FATAL_ERROR("input in flex scanner failed");                   \
		result = n;                                                           \
	}                                                                         \
	else if (((result = fread(buf, 1, max_size, yyin)) == 0) && ferror(yyin)) \
		YY_FATAL_ERROR("input in flex scanner failed");
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error(msg)
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO((void))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 28 "lexer.l"

#line 860 "main.cpp"

	if (yy_init)
	{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if (!yy_start)
			yy_start = 1; /* first start state */

		if (!yyin)
			yyin = stdin;

		if (!yyout)
			yyout = stdout;

		if (!yy_current_buffer)
			yy_current_buffer =
				yy_create_buffer(yyin, YY_BUF_SIZE);

		yy_load_buffer_state();
	}

	while (1) /* loops until end-of-file is reached */
	{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
	yy_match:
		do
		{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if (yy_accept[yy_current_state])
			{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
			}
			while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
			{
				yy_current_state = (int)yy_def[yy_current_state];
				if (yy_current_state >= 307)
					yy_c = yy_meta[(unsigned int)yy_c];
			}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
			++yy_cp;
		} while (yy_base[yy_current_state] != 965);

	yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if (yy_act == 0)
		{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
		}

		YY_DO_BEFORE_ACTION;

	do_action: /* This label is used only to access EOF actions. */

		switch (yy_act)
		{		/* beginning of action switch */
		case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

		case 1:
			YY_RULE_SETUP
#line 29 "lexer.l"
			{
				TLex *lex = new TLex;
				lex->_name = "int";
				return lex;
			}
			YY_BREAK
		case 2:
			YY_RULE_SETUP
#line 35 "lexer.l"
			{
				TLex *lex = new TLex;
				lex->_name = "int binary";
				return lex;
			}
			YY_BREAK
		case 3:
			YY_RULE_SETUP
#line 41 "lexer.l"
			{
				TLex *lex = new TLex;
				lex->_name = "int octal";
				return lex;
			}
			YY_BREAK
		case 4:
			YY_RULE_SETUP
#line 47 "lexer.l"
			{
				TLex *lex = new TLex;
				lex->_name = "int hexadecimal";
				return lex;
			}
			YY_BREAK
		case 5:
			YY_RULE_SETUP
#line 53 "lexer.l"
			{
				TLex *lex = new TLex;
				lex->_name = "float";
				return lex;
			}
			YY_BREAK
		case 6:
			YY_RULE_SETUP
#line 59 "lexer.l"
			{
				TLex *lex = new TLex;
				lex->_name = "arithmetic operation";
				return lex;
			}
			YY_BREAK
		case 7:
			YY_RULE_SETUP
#line 65 "lexer.l"
			{
				TLex *lex = new TLex;
				lex->_name = "string";
				return lex;
			}
			YY_BREAK
		case 8:
			YY_RULE_SETUP
#line 71 "lexer.l"
			{
				TLex *lex = new TLex;
				lex->_name = "logical operation";
				return lex;
			}
			YY_BREAK
		case 9:
			YY_RULE_SETUP
#line 77 "lexer.l"
			{
				TLex *lex = new TLex;
				lex->_name = "control structure";
				return lex;
			}
			YY_BREAK
		case 10:
			YY_RULE_SETUP
#line 83 "lexer.l"
			{
				TLex *lex = new TLex;
				lex->_name = "assignment";
				return lex;
			}
			YY_BREAK
		case 11:
			YY_RULE_SETUP
#line 89 "lexer.l"
			{
				TLex *lex = new TLex;
				lex->_name = "separator";
				return lex;
			}
			YY_BREAK
		case 12:
			YY_RULE_SETUP
#line 95 "lexer.l"
			{
				TLex *lex = new TLex;
				lex->_name = "cycle";
				return lex;
			}
			YY_BREAK
		case 13:
			YY_RULE_SETUP
#line 101 "lexer.l"
			{
				TLex *lex = new TLex;
				lex->_name = "key word";
				return lex;
			}
			YY_BREAK
		case 14:
			YY_RULE_SETUP
#line 107 "lexer.l"
			{
				TLex *lex = new TLex;
				lex->_name = "identifier";
				return lex;
			}
			YY_BREAK
		case 15:
			YY_RULE_SETUP
#line 113 "lexer.l"
			{
				TLex *lex = new TLex;
				lex->_name = "oneline comment";
				return lex;
			}
			YY_BREAK
		case 16:
			YY_RULE_SETUP
#line 119 "lexer.l"
			{
				TLex *lex = new TLex;
				lex->_name = "multiline comment";
				return lex;
			}
			YY_BREAK
		case 17:
			YY_RULE_SETUP
#line 126 "lexer.l"
			ECHO;
			YY_BREAK
#line 1092 "main.cpp"
		case YY_STATE_EOF(INITIAL):
			yyterminate();

		case YY_END_OF_BUFFER:
		{
			/* Amount of text matched not including the EOB char. */
			int yy_amount_of_matched_text = (int)(yy_cp - yytext_ptr) - 1;

			/* Undo the effects of YY_DO_BEFORE_ACTION. */
			*yy_cp = yy_hold_char;

			if (yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW)
			{
				/* We're scanning a new file or input source.  It's
				 * possible that this happened because the user
				 * just pointed yyin at a new source and called
				 * yylex().  If so, then we have to assure
				 * consistency between yy_current_buffer and our
				 * globals.  Here is the right place to do so, because
				 * this is the first action (other than possibly a
				 * back-up) that will match for the new input source.
				 */
				yy_n_chars = yy_current_buffer->yy_n_chars;
				yy_current_buffer->yy_input_file = yyin;
				yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

			/* Note that here we test for yy_c_buf_p "<=" to the position
			 * of the first EOB in the buffer, since yy_c_buf_p will
			 * already have been incremented past the NUL character
			 * (since all states make transitions on EOB to the
			 * end-of-buffer state).  Contrast this with the test
			 * in input().
			 */
			if (yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars])
			{ /* This was really a NUL. */
				yy_state_type yy_next_state;

				yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				/* Okay, we're now positioned to make the NUL
				 * transition.  We couldn't have
				 * yy_get_previous_state() go ahead and do it
				 * for us because it doesn't know how to deal
				 * with the possibility of jamming (and we don't
				 * want to build jamming into it because then it
				 * will run more slowly).
				 */

				yy_next_state = yy_try_NUL_trans(yy_current_state);

				yy_bp = yytext_ptr + YY_MORE_ADJ;

				if (yy_next_state)
				{
					/* Consume the NUL. */
					yy_cp = ++yy_c_buf_p;
					yy_current_state = yy_next_state;
					goto yy_match;
				}

				else
				{
					yy_cp = yy_c_buf_p;
					goto yy_find_action;
				}
			}

			else
				switch (yy_get_next_buffer())
				{
				case EOB_ACT_END_OF_FILE:
				{
					yy_did_buffer_switch_on_eof = 0;

					if (yywrap())
					{
						/* Note: because we've taken care in
						 * yy_get_next_buffer() to have set up
						 * yytext, we can now set up
						 * yy_c_buf_p so that if some total
						 * hoser (like flex itself) wants to
						 * call the scanner after we return the
						 * YY_NULL, it'll still work - another
						 * YY_NULL will get returned.
						 */
						yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

						yy_act = YY_STATE_EOF(YY_START);
						goto do_action;
					}

					else
					{
						if (!yy_did_buffer_switch_on_eof)
							YY_NEW_FILE;
					}
					break;
				}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p =
						yytext_ptr + yy_amount_of_matched_text;

					yy_current_state = yy_get_previous_state();

					yy_cp = yy_c_buf_p;
					yy_bp = yytext_ptr + YY_MORE_ADJ;
					goto yy_match;

				case EOB_ACT_LAST_MATCH:
					yy_c_buf_p =
						&yy_current_buffer->yy_ch_buf[yy_n_chars];

					yy_current_state = yy_get_previous_state();

					yy_cp = yy_c_buf_p;
					yy_bp = yytext_ptr + YY_MORE_ADJ;
					goto yy_find_action;
				}
			break;
		}

		default:
			YY_FATAL_ERROR(
				"fatal flex scanner internal error--no action found");
		} /* end of action switch */
	}	  /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if (yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1])
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--end of buffer missed");

	if (yy_current_buffer->yy_fill_buffer == 0)
	{ /* Don't try to fill the buffer, so this is an EOF. */
		if (yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1)
		{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
		}

		else
		{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
		}
	}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int)(yy_c_buf_p - yytext_ptr) - 1;

	for (i = 0; i < number_to_move; ++i)
		*(dest++) = *(source++);

	if (yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING)
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
	{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while (num_to_read <= 0)
		{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
				"input buffer overflow, can't enlarge buffer because scanner uses REJECT");
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int)(yy_c_buf_p - b->yy_ch_buf);

			if (b->yy_is_our_buffer)
			{
				int new_size = b->yy_buf_size * 2;

				if (new_size <= 0)
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc((void *)b->yy_ch_buf,
									b->yy_buf_size + 2);
			}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if (!b->yy_ch_buf)
				YY_FATAL_ERROR(
					"fatal error - scanner input buffer overflow");

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						  number_to_move - 1;
#endif
		}

		if (num_to_read > YY_READ_BUF_SIZE)
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT((&yy_current_buffer->yy_ch_buf[number_to_move]),
				 yy_n_chars, num_to_read);
	}

	if (yy_n_chars == 0)
	{
		if (number_to_move == YY_MORE_ADJ)
		{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin);
		}

		else
		{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
		}
	}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for (yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp)
	{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if (yy_accept[yy_current_state])
		{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
		}
		while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
		{
			yy_current_state = (int)yy_def[yy_current_state];
			if (yy_current_state >= 307)
				yy_c = yy_meta[(unsigned int)yy_c];
		}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
	}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans(yy_state_type yy_current_state)
#else
static yy_state_type yy_try_NUL_trans(yy_current_state)
yy_state_type yy_current_state;
#endif
{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if (yy_accept[yy_current_state])
	{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
	}
	while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
	{
		yy_current_state = (int)yy_def[yy_current_state];
		if (yy_current_state >= 307)
			yy_c = yy_meta[(unsigned int)yy_c];
	}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int)yy_c];
	yy_is_jam = (yy_current_state == 306);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput(int c, register char *yy_bp)
#else
static void yyunput(c, yy_bp) int c;
register char *yy_bp;
#endif
{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if (yy_cp < yy_current_buffer->yy_ch_buf + 2)
	{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[yy_current_buffer->yy_buf_size + 2];
		register char *source =
			&yy_current_buffer->yy_ch_buf[number_to_move];

		while (source > yy_current_buffer->yy_ch_buf)
			*--dest = *--source;

		yy_cp += (int)(dest - source);
		yy_bp += (int)(dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if (yy_cp < yy_current_buffer->yy_ch_buf + 2)
			YY_FATAL_ERROR("flex scanner push-back overflow");
	}

	*--yy_cp = (char)c;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
}
#endif /* ifndef YY_NO_UNPUT */

#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if (*yy_c_buf_p == YY_END_OF_BUFFER_CHAR)
	{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if (yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars])
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
		{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch (yy_get_next_buffer())
			{
			case EOB_ACT_END_OF_FILE:
			{
				if (yywrap())
				{
					yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
					return EOF;
				}

				if (!yy_did_buffer_switch_on_eof)
					YY_NEW_FILE;
#ifdef __cplusplus
				return yyinput();
#else
				return input();
#endif
			}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
				break;

			case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
				YY_FATAL_ERROR(
					"unexpected last match in yyinput()");
#else
				YY_FATAL_ERROR(
					"unexpected last match in input()");
#endif
			}
		}
	}

	c = *(unsigned char *)yy_c_buf_p; /* cast for 8-bit char's */
	*yy_c_buf_p = '\0';				  /* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	return c;
}

#ifdef YY_USE_PROTOS
void yyrestart(FILE *input_file)
#else
void yyrestart(input_file)
	FILE *input_file;
#endif
{
	if (!yy_current_buffer)
		yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE);

	yy_init_buffer(yy_current_buffer, input_file);
	yy_load_buffer_state();
}

#ifdef YY_USE_PROTOS
void yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
#else
void yy_switch_to_buffer(new_buffer)
	YY_BUFFER_STATE new_buffer;
#endif
{
	if (yy_current_buffer == new_buffer)
		return;

	if (yy_current_buffer)
	{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
	}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
}

#ifdef YY_USE_PROTOS
void yy_load_buffer_state(void)
#else
void yy_load_buffer_state()
#endif
{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
}

#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer(FILE *file, int size)
#else
YY_BUFFER_STATE yy_create_buffer(file, size)
FILE *file;
int size;
#endif
{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE)yy_flex_alloc(sizeof(struct yy_buffer_state));
	if (!b)
		YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *)yy_flex_alloc(b->yy_buf_size + 2);
	if (!b->yy_ch_buf)
		YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b, file);

	return b;
}

#ifdef YY_USE_PROTOS
void yy_delete_buffer(YY_BUFFER_STATE b)
#else
void yy_delete_buffer(b)
	YY_BUFFER_STATE b;
#endif
{
	if (!b)
		return;

	if (b == yy_current_buffer)
		yy_current_buffer = (YY_BUFFER_STATE)0;

	if (b->yy_is_our_buffer)
		yy_flex_free((void *)b->yy_ch_buf);

	yy_flex_free((void *)b);
}

#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO((int));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer(YY_BUFFER_STATE b, FILE *file)
#else
void yy_init_buffer(b, file)
	YY_BUFFER_STATE b;
FILE *file;
#endif

{
	yy_flush_buffer(b);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty(fileno(file)) > 0) : 0;
#endif
#endif
}

#ifdef YY_USE_PROTOS
void yy_flush_buffer(YY_BUFFER_STATE b)
#else
void yy_flush_buffer(b)
	YY_BUFFER_STATE b;
#endif

{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if (b == yy_current_buffer)
		yy_load_buffer_state();
}

#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer(char *base, yy_size_t size)
#else
YY_BUFFER_STATE yy_scan_buffer(base, size)
char *base;
yy_size_t size;
#endif
{
	YY_BUFFER_STATE b;

	if (size < 2 ||
		base[size - 2] != YY_END_OF_BUFFER_CHAR ||
		base[size - 1] != YY_END_OF_BUFFER_CHAR)
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE)yy_flex_alloc(sizeof(struct yy_buffer_state));
	if (!b)
		YY_FATAL_ERROR("out of dynamic memory in yy_scan_buffer()");

	b->yy_buf_size = size - 2; /* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b);

	return b;
}
#endif

#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string(yyconst char *str)
#else
YY_BUFFER_STATE yy_scan_string(str)
yyconst char *str;
#endif
{
	int len;
	for (len = 0; str[len]; ++len)
		;

	return yy_scan_bytes(str, len);
}
#endif

#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes(yyconst char *bytes, int len)
#else
YY_BUFFER_STATE yy_scan_bytes(bytes, len)
yyconst char *bytes;
int len;
#endif
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *)yy_flex_alloc(n);
	if (!buf)
		YY_FATAL_ERROR("out of dynamic memory in yy_scan_bytes()");

	for (i = 0; i < len; ++i)
		buf[i] = bytes[i];

	buf[len] = buf[len + 1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf, n);
	if (!b)
		YY_FATAL_ERROR("bad buffer in yy_scan_bytes()");

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
#endif

#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state(int new_state)
#else
static void yy_push_state(new_state) int new_state;
#endif
{
	if (yy_start_stack_ptr >= yy_start_stack_depth)
	{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof(int);

		if (!yy_start_stack)
			yy_start_stack = (int *)yy_flex_alloc(new_size);

		else
			yy_start_stack = (int *)yy_flex_realloc(
				(void *)yy_start_stack, new_size);

		if (!yy_start_stack)
			YY_FATAL_ERROR(
				"out of memory expanding start-condition stack");
	}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
}
#endif

#ifndef YY_NO_POP_STATE
static void yy_pop_state()
{
	if (--yy_start_stack_ptr < 0)
		YY_FATAL_ERROR("start-condition stack underflow");

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
}
#endif

#ifndef YY_NO_TOP_STATE
static int yy_top_state()
{
	return yy_start_stack[yy_start_stack_ptr - 1];
}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error(yyconst char msg[])
#else
static void yy_fatal_error(msg) char msg[];
#endif
{
	(void)fprintf(stderr, "%s\n", msg);
	exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n)                                \
	do                                           \
	{                                            \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char;           \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ;   \
		yy_hold_char = *yy_c_buf_p;              \
		*yy_c_buf_p = '\0';                      \
		yyleng = n;                              \
	} while (0)

/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy(char *s1, yyconst char *s2, int n)
#else
static void yy_flex_strncpy(s1, s2, n) char *s1;
yyconst char *s2;
int n;
#endif
{
	register int i;
	for (i = 0; i < n; ++i)
		s1[i] = s2[i];
}
#endif

#ifdef YY_USE_PROTOS
static void *yy_flex_alloc(yy_size_t size)
#else
static void *yy_flex_alloc(size)
yy_size_t size;
#endif
{
	return (void *)malloc(size);
}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc(void *ptr, yy_size_t size)
#else
static void *yy_flex_realloc(ptr, size) void *ptr;
yy_size_t size;
#endif
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *)realloc((char *)ptr, size);
}

#ifdef YY_USE_PROTOS
static void yy_flex_free(void *ptr)
#else
static void yy_flex_free(ptr) void *ptr;
#endif
{
	free(ptr);
}

#if YY_MAIN
int main()
{
	yylex();
	return 0;
}
#endif
#line 126 "lexer.l"

int main()
{
	TLex *yyin = 0;
	do
	{
		yyin = nextLex();
		std::cout << yyin->_name << std::endl;
	} while (yyin != 0);

	return 0;
}